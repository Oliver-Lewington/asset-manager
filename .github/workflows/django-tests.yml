name: Django Multi-Stage Test Workflow

on:
  pull_request:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      venv-path: ${{ steps.set-venv-path.outputs.venv-path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Create virtual environment and install dependencies
        id: set-venv-path
        run: |
          python -m venv venv
          echo "venv-path=$PWD/venv" >> $GITHUB_OUTPUT
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Cache venv
        uses: actions/cache@v3
        with:
          path: ./venv
          key: ${{ runner.os }}-venv-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-

  migrations:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v3
      - name: Restore venv
        uses: actions/cache@v3
        with:
          path: ./venv
          key: ${{ runner.os }}-venv-${{ hashFiles('requirements.txt') }}

      - name: Ensure venv exists
        run: |
          if [ ! -f ../venv/bin/activate ]; then
            python -m venv ../venv
            source ../venv/bin/activate
            pip install -r ../requirements.txt
          fi
        working-directory: ./asset_manager

      - name: Run migrations
        working-directory: ./asset_manager
        run: |
          source ../venv/bin/activate
          python manage.py migrate

  unit-tests:
    runs-on: ubuntu-latest
    needs: migrations
    steps:
      - uses: actions/checkout@v3
      - name: Restore venv
        uses: actions/cache@v3
        with:
          path: ./venv
          key: ${{ runner.os }}-venv-${{ hashFiles('requirements.txt') }}

      - name: Ensure venv exists
        run: |
          if [ ! -f ../venv/bin/activate ]; then
            python -m venv ../venv
            source ../venv/bin/activate
            pip install -r ../requirements.txt
          fi
        working-directory: ./asset_manager

      - name: Run unit tests
        working-directory: ./asset_manager
        run: |
          source ../venv/bin/activate
          pytest --ds=asset_manager.settings

  sql-injection-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v3
      - name: Restore venv
        uses: actions/cache@v3
        with:
          path: ./venv
          key: ${{ runner.os }}-venv-${{ hashFiles('requirements.txt') }}

      - name: Ensure venv exists
        run: |
          if [ ! -f ../venv/bin/activate ]; then
            python -m venv ../venv
            source ../venv/bin/activate
            pip install -r ../requirements.txt
          fi
        working-directory: ./asset_manager

      - name: Run SQL injection tests
        working-directory: ./asset_manager
        run: |
          source ../venv/bin/activate
          python manage.py shell -c "from django.contrib.auth.models import User; User.objects.create_user(username='testuser', password='testpassword')"
          nohup python manage.py runserver 0.0.0.0:8000 &
          sleep 5
          python inventory/tests/security/sqlmap-test.py
        env:
          DJANGO_ENV: test
          SQLMAP_TEST_USERNAME: ${{ secrets.SQLMAP_TEST_USERNAME }}
          SQLMAP_TEST_PASSWORD: ${{ secrets.SQLMAP_TEST_PASSWORD }}
          